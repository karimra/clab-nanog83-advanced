name: deploy
on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  install_containerlab:
    runs-on: 
      - self-hosted
      - kss
    steps:
      - run: bash -c "$(curl -sL https://get-clab.srlinux.dev)"
  
  install_gnmic:
    runs-on: 
      - self-hosted
      - kss
    steps:
      - run: bash -c "$(curl -sL https://get-gnmic.kmrd.dev)"
  
  deploy_lab:
    runs-on: 
      - self-hosted
      - kss
    needs:
      - install_containerlab
      - install_gnmic
    steps:
      - uses: actions/checkout@v2
      - run: sudo clab deploy -t nanog83.clab.yaml --reconfigure
  
  configure_interfaces:
    runs-on: 
      - self-hosted
      - kss
    needs:
      - deploy_lab
    steps:
      - run: |
          gnmic --log \
                -a $(docker ps -f label=clab-node-kind=srl -f label=containerlab=nanog83 --format {{.Names}} | paste -s -d, -) \
                --tls-ca clab-nanog83/ca/root/root-ca.pem \
                -u admin \
                -p admin \
                -e json_ietf \
                set \
                --request-file config/1.interfaces/interfaces_template.gotmpl \
                --request-vars config/1.interfaces/interfaces_template_vars.yaml
  
  configure_subinterfaces:
    runs-on: 
      - self-hosted
      - kss
    needs:
      - configure_interfaces
    steps:
      - run: |
          gnmic --log \
                -a $(docker ps -f label=clab-node-kind=srl -f label=containerlab=nanog83 --format {{.Names}} | paste -s -d, -) \
                --tls-ca clab-nanog83/ca/root/root-ca.pem \
                -u admin \
                -p admin \
                -e json_ietf \
                set \
                --request-file config/1.interfaces/subinterfaces_template.gotmpl \
                --request-vars config/1.interfaces/interfaces_template_vars.yaml

  configure_routing_policy:
    runs-on: 
      - self-hosted
      - kss
    needs:
      - deploy_lab
    steps:
      - run: |
          gnmic --log \
                -a $(docker ps -f label=clab-node-kind=srl -f label=containerlab=nanog83 --format {{.Names}} | paste -s -d, -) \
                --tls-ca clab-nanog83/ca/root/root-ca.pem \
                -u admin \
                -p admin \
                -e json_ietf \
                set \
                --request-file config/2.routing-policy/routing_policy_prefix_set_template.gotmpl \
                --request-file config/2.routing-policy/routing_policy_policy_template.gotmpl \
                --request-vars config/2.routing-policy/routing_policy_vars.yaml

  configure_network_instance:
    runs-on: 
      - self-hosted
      - kss
    needs:
      - configure_subinterfaces
      - configure_routing_policy
    steps:
      - run: |
          gnmic --log \
                -a $(docker ps -f label=clab-node-kind=srl -f label=containerlab=nanog83 --format {{.Names}} | paste -s -d, -) \
                --tls-ca clab-nanog83/ca/root/root-ca.pem \
                -u admin \
                -p admin \
                -e json_ietf \
                set \
                --request-file config/3.network-instance/network_instance_template.gotmpl \
                --request-vars config/3.network-instance/network_instance_template_vars.yaml

  configure_bgp:
    runs-on: 
      - self-hosted
      - kss
    needs:
      - configure_network_instance
    steps:
      - run: |
          gnmic --log \
                -a $(docker ps -f label=clab-node-kind=srl -f label=containerlab=nanog83 --format {{.Names}} | paste -s -d, -) \
                --tls-ca clab-nanog83/ca/root/root-ca.pem \
                -u admin \
                -p admin \
                -e json_ietf \
                set \
                --request-file config/3.network-instance/network_instance_bgp_template.gotmpl \
                --request-vars config/3.network-instance/network_instance_template_vars.yaml
  
  check_bgp_status:
    runs-on: 
      - self-hosted
      - kss
    needs:
      - configure_bgp
    steps:
      - run: |
          sleep 5
          for node in $(docker ps -f label=clab-node-kind=srl -f label=containerlab=nanog83 --format {{.Names}})
          do 
            bgp_state=$(gnmic -a $node --tls-ca clab-nanog83/ca/root/root-ca.pem -u admin -p admin -e ascii --format flat get --path /network-instance[name=default]/protocols/bgp/oper-state | awk '{print $NF}')
            echo "$(date): BGP state of $node is ${bgp_state^^}"
              if [ $bgp_state != "up" ]; then
                printf "unexpected BGP state for node $node : ${bgp_state^^} (ノ ゜Д゜)ノ ︵ ┻━┻\n"
                exit 1
              fi
          printf "$(date): \\U1F44D BGP state of $node is ${bgp_state^^} \n"
          done

  check_bgp_neighbors:
    runs-on: 
      - self-hosted
      - kss
    needs:
      - check_bgp_status
    steps:
      - run: |
          sleep 15
          for node in $(docker ps -f label=clab-node-kind=srl -f label=containerlab=nanog83 -f label=is_spine=true --format {{.Names}})
          do 
            num_neighbors=$(
              gnmic -a $node \
                --tls-ca clab-nanog83/ca/root/root-ca.pem \
                -u admin \
                -p admin \
                -e ascii \
                --format flat \
                get \
                --path /network-instance[name=default]/protocols/bgp/neighbor/ipv4-unicast/oper-state | grep neighbor | wc -l
                )

              if [ "$num_neighbors" -ne "6" ]
              then
                printf "unexpected number of neighbors for node $node : $num_neighbors (ノ ゜Д゜)ノ ︵ ┻━┻\n"
                exit 1
              fi
              printf "$(date): \\U1F44D $node has $num_neighbors BGP neighbors \n"
          done
